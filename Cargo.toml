[package]
name = "kernel"
version = "0.1.0"
edition = "2021"
authors = ["Sxmourai"]
autotests = true

[dependencies]
x86_64 = "0.14.10" # Usefull asm functions (inb outb, enable interrupts & all)
bootloader = { version = "0.9.23", features = ["map_physical_memory", ]} #"map_physical_memory"
# Some utils data types (std::collections, asyncs, hashmaps...)
spin = "0.9.8" # We have our allocator, so we can use std::spin
hashbrown = "0.14.0" # A hashmap/hashset & all implementation
crossbeam-queue = { version = "0.3.10", default-features = false, features = ["alloc"]}
futures-util = { version = "0.3.4", default-features = false, features = ["alloc"]}
lazy_static = { version = "1.4.0", features=["spin_no_std"]} # Helps us with static mut's & all
# Random numbers
rand = { version = "0.8.5", features = ["small_rng"], default-features = false }


# Usefull for parsing hardware infos
pc-keyboard = "0.7.0" # Easy transform from key code to char
pic8259 = "0.10.1" # A PIC implementation, we might not need it when we will have APIC
uart_16550 = "0.3.0" # Talks to qemu
linked_list_allocator = "0.10.5" # A linked list allocator lib & also Heap
raw-cpuid = "11.0.1" # Gets some cpuid infos
ntfs = {version="0.4.0", default-features = false, optional=true} # A filesystem implementation of ntfs
binrw = {version="0.11.2", default-features = false, optional=true} # Needed by ntfs

# Simple features
log = {version="0.4.20", default-features = false} # Logging facility (not that useful)
bitfield = "0.14.0" # Usefull to create packed structs with same fields
bytemuck = {version="1.14.1", features = ["derive"]} # Very usefull for converting between types (Vec<u8> -> ExtSuperblock)
bit_field = "0.10.2" # Amazing library to read / set bits on u[8,16,32,...]

# Our libs
pci-ids = { git = "https://github.com/Sxmourai/auto-pci-ids.rs.git", optional = true} # Pci ids to discover what is connected via pci
shell_macro = { path = "src/user/shell_macro" }

[package.metadata.bootimage]
run-args = [
    "-device", "isa-debug-exit,iobase=0xf4,iosize=0x04", "-serial", "stdio",
    # DISKFLAG for build script (see /build/disk_create.py)
"-drive", "file=build/ntfsgpt.img,format=raw",
"-drive", "file=build/ext2gpt.img,format=raw",
    # ENDDISKFLAG
"-drive", "file=build/fatgpt.img,format=raw,if=none,id=nvm",
"-device", "nvme,serial=deadbeef,drive=nvm",
    # If working on APIC and IPI/SMP: (sets amount of cores to 4)
    #TODO When APIC feature automatically set -smp 4
    "-smp","4"
]
test-args = [
    "-display", "none"
]
test-success-exit-code = 33
test-timeout = 300

[features]
default = ["pci-ids"]
pci-ids = ["dep:pci-ids"]
ata = []
fs = ["ata", "dep:ntfs", "dep:binrw"]
apic = []
smp = ["apic"]

[profile.dev.package."*"]
opt-level = "z"

[profile.dev]
opt-level = 0 # Optimize for size
strip = true
# lto = true
panic = "abort" # disable stack unwinding on panic

# https://github.com/johnthagen/min-sized-rust
[profile.release]
opt-level = "z" # Optimize for size
strip = true
lto = true
panic = "abort" # disable stack unwinding on panic
